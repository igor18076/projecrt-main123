"""
–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–π –ö–¢
"""
import os
import sys
import argparse
import torch
from pathlib import Path

def check_setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if sys.version_info < (3, 10):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    if sys.version_info >= (3, 12):
        print(f"‚ö†Ô∏è  Python 3.12+ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python 3.10-3.11")
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    required_files = [
        "config.py",
        "model.py", 
        "trainer.py",
        "data_loader.py",
        "main.py",
        "web_interface.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import torch
        import datasets
        import gradio
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU
    if torch.cuda.is_available():
        print(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name()}")
    else:
        print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
    
    return True

def quick_train():
    """–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    
    cmd = [
        sys.executable, "main.py", "train",
        "--epochs", "10",
        "--batch-size", "4",
        "--learning-rate", "1e-4",
        "--visualize"
    ]
    
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        import subprocess
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False

def launch_web_interface():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        import subprocess
        cmd = [sys.executable, "web_interface.py"]
        subprocess.run(cmd)
    except KeyboardInterrupt:
        print("\nüëã –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")

def demo_prediction():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
    checkpoint_path = "./checkpoints/best_model.pth"
    if not os.path.exists(checkpoint_path):
        print("‚ùå –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python quick_start.py --train")
        return False
    
    try:
        from model import load_pretrained_model
        import numpy as np
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        device = "cuda" if torch.cuda.is_available() else "cpu"
        model = load_pretrained_model(checkpoint_path, device)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dummy_volume = np.random.rand(64, 64, 64).astype(np.float32)
        dummy_tensor = torch.FloatTensor(dummy_volume).unsqueeze(0).unsqueeze(0)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if device == "directml":
            try:
                import torch_directml
                device_obj = torch_directml.device()
                dummy_tensor = dummy_tensor.to(device_obj)
            except ImportError:
                dummy_tensor = dummy_tensor.to(device)
        else:
            dummy_tensor = dummy_tensor.to(device)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        model.eval()
        with torch.no_grad():
            logits = model(dummy_tensor)
            probabilities = torch.sigmoid(logits)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print("-" * 50)
        
        from config import PATHOLOGY_LABELS
        for i, pathology in enumerate(PATHOLOGY_LABELS):
            prob = probabilities[0, i].item()
            if prob > 0.1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ > 10%
                print(f"{pathology}: {prob:.3f}")
        
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç—ã
    checkpoint_dir = Path("./checkpoints")
    if checkpoint_dir.exists():
        checkpoints = list(checkpoint_dir.glob("*.pth"))
        print(f"–ß–µ–∫–ø–æ–∏–Ω—Ç—ã: {len(checkpoints)} —Ñ–∞–π–ª–æ–≤")
        if checkpoints:
            latest = max(checkpoints, key=os.path.getmtime)
            print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {latest.name}")
    else:
        print("–ß–µ–∫–ø–æ–∏–Ω—Ç—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    output_dir = Path("./outputs")
    if output_dir.exists():
        plots = list(output_dir.glob("plots/*.png"))
        analysis = list(output_dir.glob("analysis/*.txt"))
        print(f"–ì—Ä–∞—Ñ–∏–∫–∏: {len(plots)} —Ñ–∞–π–ª–æ–≤")
        print(f"–ê–Ω–∞–ª–∏–∑: {len(analysis)} —Ñ–∞–π–ª–æ–≤")
    else:
        print("–í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    export_dir = Path("./exported_models")
    if export_dir.exists():
        exported = list(export_dir.glob("*"))
        print(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: {len(exported)} —Ñ–∞–π–ª–æ–≤")
    else:
        print("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ö–¢")
    
    parser.add_argument("--check", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--train", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    parser.add_argument("--web", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    parser.add_argument("--demo", action="store_true", help="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    parser.add_argument("--status", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--all", action="store_true", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    args = parser.parse_args()
    
    if not any([args.check, args.train, args.web, args.demo, args.status, args.all]):
        parser.print_help()
        return
    
    print("üè• –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–π –ö–¢")
    print("=" * 60)
    
    if args.check or args.all:
        if not check_setup():
            print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞")
            sys.exit(1)
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    if args.status or args.all:
        show_status()
    
    if args.train or args.all:
        if not check_setup():
            print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return
        
        if quick_train():
            print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É ./checkpoints/ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É ./outputs/plots/ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    
    if args.demo or args.all:
        demo_prediction()
    
    if args.web or args.all:
        if not check_setup():
            print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
            return
        
        print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        print("   –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:7860")
        print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        launch_web_interface()

if __name__ == "__main__":
    main()

