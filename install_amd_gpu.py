#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyTorch —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AMD ROCm
"""
import subprocess
import sys
import platform
import os

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîÑ {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥: {e.stdout}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def check_rocm_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ROCm"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É ROCm...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    rocm_path = os.environ.get("ROCM_PATH")
    hip_path = os.environ.get("HIP_PATH")
    
    if rocm_path or hip_path:
        print(f"‚úÖ ROCm –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print(f"ROCM_PATH: {rocm_path}")
        print(f"HIP_PATH: {hip_path}")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
    rocm_paths = [
        "/opt/rocm",
        "/usr/local/rocm",
        "/opt/rocm-*"
    ]
    
    for path in rocm_paths:
        if os.path.exists(path):
            print(f"‚úÖ ROCm –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
            return True
    
    print("‚ùå ROCm –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ROCm –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º:")
    print("https://rocm.docs.amd.com/en/latest/deploy/linux/quick_start.html")
    return False

def install_pytorch_rocm():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ROCm"""
    print("\nüöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AMD ROCm...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é ROCm
    rocm_version = "5.6"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é ROCm –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    try:
        result = subprocess.run(["rocm-smi", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –≤—ã–≤–æ–¥–∞
            output = result.stdout
            if "rocm" in output.lower():
                # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
                import re
                version_match = re.search(r'(\d+\.\d+)', output)
                if version_match:
                    rocm_version = version_match.group(1)
                    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–µ—Ä—Å–∏—è ROCm: {rocm_version}")
    except:
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é ROCm –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {rocm_version}")
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    commands = [
        # –û–±–Ω–æ–≤–ª—è–µ–º pip
        "python -m pip install --upgrade pip",
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch —Å ROCm
        f"pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm{rocm_version}",
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        "pip install -r requirements.txt"
    ]
    
    success = True
    for command in commands:
        if not run_command(command, f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command.split()[2] if len(command.split()) > 2 else command}"):
            success = False
            break
    
    return success

def test_installation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
    
    test_code = """
import torch
import sys

print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ROCm
if hasattr(torch.version, 'hip'):
    print(f"ROCm –≤–µ—Ä—Å–∏—è: {torch.version.hip}")
    print("‚úÖ ROCm –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
else:
    print("‚ùå ROCm –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
if torch.cuda.is_available():
    print(f"CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}")
    for i in range(torch.cuda.device_count()):
        print(f"GPU {i}: {torch.cuda.get_device_name(i)}")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞
try:
    x = torch.randn(2, 3)
    print(f"CPU —Ç–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω: {x.shape}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ROCm
    if hasattr(torch.version, 'hip'):
        try:
            x_rocm = x.to('cuda')  # ROCm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'cuda' –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            print(f"ROCm —Ç–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω: {x_rocm.shape}")
            print("‚úÖ ROCm —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ROCm: {e}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–Ω–∑–æ—Ä–∞: {e}")
"""
    
    try:
        exec(test_code)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("–£–°–¢–ê–ù–û–í–ö–ê PYTORCH –° –ü–û–î–î–ï–†–ñ–ö–û–ô AMD ROCm")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    if platform.system() != "Linux":
        print("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Linux —Å–∏—Å—Ç–µ–º")
        print("–î–ª—è Windows/macOS –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É PyTorch")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"‚úÖ –û–°: {platform.system()} {platform.release()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ROCm
    if not check_rocm_installation():
        print("\n‚ö†Ô∏è  ROCm –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
        print("PyTorch –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ROCm, –Ω–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ ROCm")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch
    if not install_pytorch_rocm():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PyTorch")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if not test_installation():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return False
    
    print("\n" + "=" * 60)
    print("‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å AMD GPU:")
    print("python main.py train --epochs 10")
    print("\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("python -c \"from gpu_utils import detect_gpu_device, print_device_info; device = detect_gpu_device(); print_device_info(device)\"")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
