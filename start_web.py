#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ª—É—á—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
import os
import sys
import subprocess
import socket
from pathlib import Path

def check_port_available(port):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('127.0.0.1', port))
            return True
    except OSError:
        return False

def find_available_port(start_port=7860):
    """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
    for port in range(start_port, start_port + 100):
        if check_port_available(port):
            return port
    return None

def check_gradio_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Gradio"""
    try:
        import gradio as gr
        version = gr.__version__
        print(f"üì¶ Gradio –≤–µ—Ä—Å–∏—è: {version}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        major_version = int(version.split('.')[0])
        if major_version < 3:
            print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å Gradio –¥–æ –≤–µ—Ä—Å–∏–∏ 3.0+")
            return False
        elif major_version >= 4:
            print("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Gradio")
        else:
            print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è Gradio")
        
        return True
    except ImportError:
        print("‚ùå Gradio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def upgrade_gradio():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Gradio"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Gradio...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "gradio"])
        print("‚úÖ Gradio –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Gradio: {e}")
        return False

def launch_web_interface_safe():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Gradio
    if not check_gradio_version():
        print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å Gradio...")
        upgrade_gradio()
    
    # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç
    port = find_available_port()
    if not port:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç")
        return False
    
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç: {port}")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
    launch_options = [
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
        {
            "share": False,
            "port": port,
            "description": "–û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫"
        },
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –° –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        {
            "share": True,
            "port": port,
            "description": "–° –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"
        },
        # –í–∞—Ä–∏–∞–Ω—Ç 3: –î—Ä—É–≥–æ–π –ø–æ—Ä—Ç
        {
            "share": True,
            "port": 8080,
            "description": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç"
        }
    ]
    
    for i, options in enumerate(launch_options, 1):
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ {i}: {options['description']}")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
            from web_interface import launch_web_interface
            launch_web_interface(share=options["share"], port=options["port"])
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {i} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
            if i < len(launch_options):
                print("üîÑ –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç...")
            continue
    
    print("\n‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã")
    return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ CT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("web_interface.py").exists():
        print("‚ùå –§–∞–π–ª web_interface.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
    else:
        print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    success = launch_web_interface_safe()
    
    if not success:
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç—ã 7860 –∏ 8080 —Å–≤–æ–±–æ–¥–Ω—ã")
        print("3. –û–±–Ω–æ–≤–∏—Ç–µ Gradio: pip install --upgrade gradio")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        print("5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        print("\nüîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("python web_interface.py --share")
        print("python web_interface.py --port 8080")
        print("python web_interface.py --share --port 8080")
    
    return success

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
