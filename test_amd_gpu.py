#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å AMD GPU
"""
import sys
import torch
from gpu_utils import detect_gpu_device, print_device_info, setup_device, optimize_for_device

def test_gpu_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è GPU"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è GPU...")
    
    device = detect_gpu_device()
    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    print_device_info(device)
    
    return device

def test_pytorch_gpu():
    """–¢–µ—Å—Ç PyTorch —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PyTorch —Å GPU...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
        print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
        print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {torch.cuda.device_count()}")
            for i in range(torch.cuda.device_count()):
                print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i}: {torch.cuda.get_device_name(i)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DirectML (Windows)
        try:
            import torch_directml
            print(f"DirectML –¥–æ—Å—Ç—É–ø–µ–Ω: {torch_directml.device_count() > 0}")
            if torch_directml.device_count() > 0:
                print(f"DirectML —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {torch_directml.device_count()}")
        except ImportError:
            print("DirectML: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ROCm (Linux)
        if hasattr(torch.version, 'hip'):
            print(f"ROCm –≤–µ—Ä—Å–∏—è: {torch.version.hip}")
        else:
            print("ROCm –≤–µ—Ä—Å–∏—è: –ù–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PyTorch: {e}")
        return False

def test_tensor_operations(device):
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏"""
    print(f"\nüî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏ –Ω–∞ {device}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–Ω–∑–æ—Ä
        x = torch.randn(2, 3, 4, 4, 4)  # 3D —Ç–µ–Ω–∑–æ—Ä –∫–∞–∫ –≤ CT –¥–∞–Ω–Ω—ã—Ö
        print(f"CPU —Ç–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω: {x.shape}")
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if device != "cpu":
            # –î–ª—è DirectML –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
            if device == "directml":
                try:
                    import torch_directml
                    device_obj = torch_directml.device()
                    x = x.to(device_obj)
                    print(f"–¢–µ–Ω–∑–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ DirectML: {x.shape}")
                except ImportError:
                    print("DirectML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
                    device = "cpu"
            else:
                x = x.to(device)
                print(f"–¢–µ–Ω–∑–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ {device}: {x.shape}")
            
            if device != "cpu":
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
                y = torch.randn_like(x)
                if device == "directml":
                    y = y.to(device_obj)
                else:
                    y = y.to(device)
                z = x + y
                print(f"–û–ø–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {z.shape}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–µ—Ä—Ç–∫—É (–∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏)
                conv = torch.nn.Conv3d(3, 16, kernel_size=3, padding=1)
                if device == "directml":
                    conv = conv.to(device_obj)
                else:
                    conv = conv.to(device)
                output = conv(x)
                print(f"3D —Å–≤–µ—Ä—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {output.shape}")
            
        else:
            print("CPU —Ä–µ–∂–∏–º - –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            y = torch.randn_like(x)
            z = x + y
            print(f"–û–ø–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {z.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return False

def test_model_creation(device):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print(f"\nüèó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ {device}...")
    
    try:
        from model import create_model
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
        model_config = {
            'model_type': 'resnet3d',
            'model_name': 'resnet3d_18',  # –õ–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
            'num_classes': 14,
            'input_size': (32, 32, 32),  # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
            'dropout_rate': 0.1
        }
        
        model = create_model(model_config)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if device == "directml":
            try:
                import torch_directml
                device_obj = torch_directml.device()
                model = model.to(device_obj)
            except ImportError:
                print("DirectML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
                device = "cpu"
                model = model.to(device)
        else:
            model = model.to(device)
        
        print(f"–ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {model.get_model_info()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
        test_input = torch.randn(1, 1, 32, 32, 32)
        if device == "directml":
            test_input = test_input.to(device_obj)
        else:
            test_input = test_input.to(device)
        
        with torch.no_grad():
            output = model(test_input)
            print(f"–ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {output.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AMD GPU –ü–û–î–î–ï–†–ñ–ö–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GPU
    device = test_gpu_detection()
    
    # –¢–µ—Å—Ç 2: PyTorch —Å GPU
    pytorch_ok = test_pytorch_gpu()
    
    # –¢–µ—Å—Ç 3: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏
    tensor_ok = test_tensor_operations(device)
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model_ok = test_model_creation(device)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GPU: {'‚úÖ' if device else '‚ùå'}")
    print(f"üß™ PyTorch —Å GPU: {'‚úÖ' if pytorch_ok else '‚ùå'}")
    print(f"üî¢ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏: {'‚úÖ' if tensor_ok else '‚ùå'}")
    print(f"üèó –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {'‚úÖ' if model_ok else '‚ùå'}")
    
    all_ok = pytorch_ok and tensor_ok and model_ok
    
    if all_ok:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print(f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å {device.upper()}")
        
        if device in ["rocm", "directml", "cuda"]:
            print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("python main.py train --epochs 10")
        else:
            print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            print("python main.py train --epochs 10 --cpu")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É ROCm –∏ PyTorch")
        
        if device == "rocm":
            print("\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:")
            print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ROCm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: rocm-smi")
            print("2. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyTorch: python install_amd_gpu.py")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ROCm")
        elif device == "directml":
            print("\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:")
            print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DirectML: pip install torch-directml")
            print("2. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyTorch: python install_amd_windows.py")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã AMD")
    
    return all_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
