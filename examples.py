"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–π –ö–¢
"""
import torch
import numpy as np
import os
from pathlib import Path

# –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
def example_basic_training():
    """–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("üìö –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    print("-" * 40)
    
    from trainer import create_trainer
    from config import model_config, training_config
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    model_config_dict = model_config.__dict__.copy()
    training_config_dict = training_config.__dict__.copy()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    training_config_dict.update({
        'batch_size': 4,
        'num_epochs': 5,
        'use_wandb': False,  # –û—Ç–∫–ª—é—á–∞–µ–º wandb –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        'save_every_n_epochs': 1
    })
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    device = "cuda" if torch.cuda.is_available() else "cpu"
    trainer = create_trainer(model_config_dict, training_config_dict, device)
    
    print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {trainer.model.num_classes}")
    print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {training_config_dict['batch_size']}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö: {training_config_dict['num_epochs']}")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    trainer.train(training_config_dict['num_epochs'])
    
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return trainer

# –ü—Ä–∏–º–µ—Ä 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
def example_model_inference():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("\nüìö –ü—Ä–∏–º–µ—Ä 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    print("-" * 40)
    
    from model import load_pretrained_model
    from config import PATHOLOGY_LABELS
    
    # –ü—É—Ç—å –∫ —á–µ–∫–ø–æ–∏–Ω—Ç—É
    checkpoint_path = "./checkpoints/best_model.pth"
    
    if not os.path.exists(checkpoint_path):
        print("‚ùå –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python examples.py --train")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model = load_pretrained_model(checkpoint_path, device)
    model.eval()
    
    print(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 2
    dummy_volumes = torch.randn(batch_size, 1, 64, 64, 64)
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    if device == "directml":
        try:
            import torch_directml
            device_obj = torch_directml.device()
            dummy_volumes = dummy_volumes.to(device_obj)
        except ImportError:
            dummy_volumes = dummy_volumes.to(device)
    else:
        dummy_volumes = dummy_volumes.to(device)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    with torch.no_grad():
        logits = model(dummy_volumes)
        probabilities = torch.sigmoid(logits)
        predictions = (probabilities > 0.5).float()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for i in range(batch_size):
        print(f"\n–û–±—Ä–∞–∑–µ—Ü {i+1}:")
        print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏:")
        
        for j, pathology in enumerate(PATHOLOGY_LABELS):
            prob = probabilities[i, j].item()
            pred = predictions[i, j].item()
            
            if prob > 0.1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ > 10%
                status = "–î–∞" if pred else "–ù–µ—Ç"
                print(f"  {pathology}: {prob:.3f} ({status})")
    
    print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return model

# –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å DICOM —Ñ–∞–π–ª–∞–º–∏
def example_dicom_processing():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å DICOM —Ñ–∞–π–ª–∞–º–∏"""
    print("\nüìö –ü—Ä–∏–º–µ—Ä 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ DICOM —Ñ–∞–π–ª–æ–≤")
    print("-" * 40)
    
    from data_loader import DICOMDataset, create_dicom_loader
    import pydicom
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ DICOM –¥–∞–Ω–Ω—ã–µ
    test_dicom_dir = "./test_dicom"
    os.makedirs(test_dicom_dir, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ DICOM —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö DICOM —Ñ–∞–π–ª–æ–≤...")
    
    for i in range(3):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π DICOM —Ñ–∞–π–ª
        ds = pydicom.Dataset()
        ds.PatientName = f"TestPatient_{i}"
        ds.PatientID = f"TEST{i:03d}"
        ds.Modality = "CT"
        ds.SeriesDescription = "Test CT Series"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        pixel_array = np.random.randint(0, 4096, (64, 64), dtype=np.uint16)
        ds.PixelData = pixel_array.tobytes()
        ds.Rows = 64
        ds.Columns = 64
        ds.BitsAllocated = 16
        ds.BitsStored = 16
        ds.HighBit = 15
        ds.PixelRepresentation = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        dicom_path = os.path.join(test_dicom_dir, f"test_{i:03d}.dcm")
        ds.save_as(dicom_path)
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(os.listdir(test_dicom_dir))} —Ç–µ—Å—Ç–æ–≤—ã—Ö DICOM —Ñ–∞–π–ª–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º DICOM —Ñ–∞–π–ª—ã
    dicom_files = [os.path.join(test_dicom_dir, f) for f in os.listdir(test_dicom_dir)]
    dicom_dataset = DICOMDataset(dicom_files)
    dicom_loader = create_dicom_loader(dicom_files, batch_size=1)
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dicom_dataset)} DICOM —Ñ–∞–π–ª–æ–≤")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    for batch in dicom_loader:
        volume = batch['volume']
        file_path = batch['file_path'][0]
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
        print(f"–†–∞–∑–º–µ—Ä –æ–±—ä–µ–º–∞: {volume.shape}")
        print(f"–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{volume.min():.3f}, {volume.max():.3f}]")
        break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ DICOM —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    import shutil
    shutil.rmtree(test_dicom_dir)
    print("–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

# –ü—Ä–∏–º–µ—Ä 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def example_visualization():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
    print("\nüìö –ü—Ä–∏–º–µ—Ä 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π")
    print("-" * 40)
    
    from visualization import TrainingVisualizer, ModelAnalyzer
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    num_epochs = 20
    train_losses = [0.8 - i * 0.03 + np.random.normal(0, 0.02) for i in range(num_epochs)]
    val_losses = [0.85 - i * 0.025 + np.random.normal(0, 0.03) for i in range(num_epochs)]
    
    train_metrics = []
    val_metrics = []
    
    for epoch in range(num_epochs):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        train_metric = {
            'auc_mean': 0.6 + epoch * 0.015 + np.random.normal(0, 0.01),
            'ap_mean': 0.5 + epoch * 0.012 + np.random.normal(0, 0.01)
        }
        val_metric = {
            'auc_mean': 0.58 + epoch * 0.014 + np.random.normal(0, 0.015),
            'ap_mean': 0.48 + epoch * 0.011 + np.random.normal(0, 0.012)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
        for label in PATHOLOGY_LABELS[:5]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            train_metric[f'f1_{label}'] = 0.4 + epoch * 0.01 + np.random.normal(0, 0.05)
            val_metric[f'f1_{label}'] = 0.38 + epoch * 0.009 + np.random.normal(0, 0.06)
        
        train_metrics.append(train_metric)
        val_metrics.append(val_metric)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
    visualizer = TrainingVisualizer()
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    print("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è...")
    curves_path = visualizer.plot_training_curves(
        train_losses, val_losses, train_metrics, val_metrics
    )
    print(f"–ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {curves_path}")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
    print("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º...")
    class_metrics_path = visualizer.plot_class_metrics(val_metrics[-1], "AUC")
    print(f"–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {class_metrics_path}")
    
    print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –ü—Ä–∏–º–µ—Ä 5: –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
def example_model_export():
    """–ü—Ä–∏–º–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏"""
    print("\nüìö –ü—Ä–∏–º–µ—Ä 5: –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏")
    print("-" * 40)
    
    from model_exporter import export_model
    
    # –ü—É—Ç—å –∫ —á–µ–∫–ø–æ–∏–Ω—Ç—É
    checkpoint_path = "./checkpoints/best_model.pth"
    
    if not os.path.exists(checkpoint_path):
        print("‚ùå –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python examples.py --train")
        return
    
    print("–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã...")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    exported_files = export_model(
        checkpoint_path=checkpoint_path,
        export_formats=["pytorch", "onnx", "torchscript"],
        model_name="example_ct_model",
        output_dir="./exported_models"
    )
    
    print("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for format_name, file_path in exported_files.items():
        if os.path.exists(file_path):
            size = os.path.getsize(file_path) / (1024 * 1024)  # MB
            print(f"  {format_name}: {file_path} ({size:.1f} MB)")
    
    print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

# –ü—Ä–∏–º–µ—Ä 6: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
def example_full_pipeline():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ—Ç –æ–±—É—á–µ–Ω–∏—è –¥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print("\nüìö –ü—Ä–∏–º–µ—Ä 6: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")
    print("-" * 40)
    
    print("1. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    trainer = example_basic_training()
    
    print("\n2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model = example_model_inference()
    
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    example_visualization()
    
    print("\n4. –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏...")
    example_model_export()
    
    print("\nüéâ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    
    parser.add_argument("--train", action="store_true", help="–ü—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è")
    parser.add_argument("--inference", action="store_true", help="–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    parser.add_argument("--dicom", action="store_true", help="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å DICOM")
    parser.add_argument("--visualize", action="store_true", help="–ü—Ä–∏–º–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    parser.add_argument("--export", action="store_true", help="–ü—Ä–∏–º–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞")
    parser.add_argument("--all", action="store_true", help="–í—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    args = parser.parse_args()
    
    if not any([args.train, args.inference, args.dicom, args.visualize, args.export, args.all]):
        parser.print_help()
        return
    
    print("üè• –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ö–¢")
    print("=" * 60)
    
    try:
        if args.train or args.all:
            example_basic_training()
        
        if args.inference or args.all:
            example_model_inference()
        
        if args.dicom or args.all:
            example_dicom_processing()
        
        if args.visualize or args.all:
            example_visualization()
        
        if args.export or args.all:
            example_model_export()
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

