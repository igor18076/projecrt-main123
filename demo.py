"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–π –ö–¢
"""
import sys

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
if sys.version_info < (3, 10):
    print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
    sys.exit(1)
if sys.version_info >= (3, 12):
    print(f"‚ö†Ô∏è  Python 3.12+ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
    print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python 3.10-3.11")

import os
import time
import torch
import numpy as np
from pathlib import Path

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                                              ‚ïë
    ‚ïë  üè• –°–ò–°–¢–ï–ú–ê –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ü–ê–¢–û–õ–û–ì–ò–ô –ö–¢                     ‚ïë
    ‚ïë                                                                              ‚ïë
    ‚ïë  –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç–æ–ª–æ–≥–∏–π –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö               ‚ïë
    ‚ïë  —Ç–æ–º–æ–≥—Ä–∞—Ñ–∏—è—Ö –æ—Ä–≥–∞–Ω–æ–≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç–∞—Å–µ—Ç–∞ CT-RATE      ‚ïë
    ‚ïë                                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –¢–†–ï–ë–û–í–ê–ù–ò–ô")
    print("=" * 50)
    
    # Python –≤–µ—Ä—Å–∏—è
    python_version = sys.version_info
    if python_version >= (3, 8):
        print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    else:
        print(f"‚ùå Python {python_version.major}.{python_version.minor}.{python_version.micro} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+)")
        return False
    
    # PyTorch
    try:
        import torch
        print(f"‚úÖ PyTorch {torch.__version__}")
        
        # CUDA
        if torch.cuda.is_available():
            gpu_name = torch.cuda.get_device_name()
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1e9
            print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω - {gpu_name} ({gpu_memory:.1f} GB)")
        else:
            print("‚ö†Ô∏è  CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –î—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    required_modules = [
        "datasets", "transformers", "matplotlib", "seaborn", 
        "pandas", "numpy", "scikit-learn", "pydicom", "nibabel", "gradio"
    ]
    
    missing_modules = []
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå {module}")
            missing_modules.append(module)
    
    if missing_modules:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
        return False
    
    print("\n‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    return True

def demonstrate_model_creation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("\nü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    try:
        from model import create_model
        from config import model_config
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ResNet3D-50...")
        model = create_model(model_config.__dict__)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        model_info = model.get_model_info()
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –¢–∏–ø: {model_info['model_type']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {model_info['num_classes']}")
        print(f"   –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞: {model_info['input_size']}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {model_info['total_parameters']:,}")
        print(f"   –û–±—É—á–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {model_info['trainable_parameters']:,}")
        
        # –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞...")
        device = "cuda" if torch.cuda.is_available() else "cpu"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DirectML
        if device == "cpu":
            try:
                import torch_directml
                if torch_directml.device_count() > 0:
                    device = "directml"
                    device_obj = torch_directml.device()
                    model = model.to(device_obj)
                else:
                    model = model.to(device)
            except ImportError:
                model = model.to(device)
        else:
            model = model.to(device)
        
        dummy_input = torch.randn(1, 1, 64, 64, 64)
        if device == "directml":
            dummy_input = dummy_input.to(device_obj)
        else:
            dummy_input = dummy_input.to(device)
        
        with torch.no_grad():
            start_time = time.time()
            output = model(dummy_input)
            inference_time = time.time() - start_time
        
        print(f"‚úÖ –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!")
        print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä: {output.shape}")
        print(f"   –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {inference_time*1000:.2f} –º—Å")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        return model
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return None

def demonstrate_data_loading():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        from data_loader import get_data_loaders
        from config import PATHOLOGY_LABELS
        
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ CT-RATE...")
        print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ —Å –º–∞–ª–µ–Ω—å–∫–∏–º –±–∞—Ç—á–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        train_loader, val_loader = get_data_loaders(batch_size=2, num_workers=0)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {len(train_loader.dataset)}")
        print(f"   –†–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏: {len(val_loader.dataset)}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –ø–∞—Ç–æ–ª–æ–≥–∏–π: {len(PATHOLOGY_LABELS)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –±–∞—Ç—á–∞
        print("\n–ü—Ä–∏–º–µ—Ä –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö:")
        for batch in train_loader:
            volume = batch['volume']
            labels = batch['labels']
            patient_id = batch['patient_id'][0]
            
            print(f"   –†–∞–∑–º–µ—Ä –æ–±—ä–µ–º–∞: {volume.shape}")
            print(f"   –†–∞–∑–º–µ—Ä –º–µ—Ç–æ–∫: {labels.shape}")
            print(f"   ID –ø–∞—Ü–∏–µ–Ω—Ç–∞: {patient_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏
            active_pathologies = []
            for i, label in enumerate(PATHOLOGY_LABELS):
                if labels[0, i].item() > 0.5:
                    active_pathologies.append(label)
            
            if active_pathologies:
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏: {', '.join(active_pathologies)}")
            else:
                print("   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏: –Ω–µ—Ç")
            
            break  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –±–∞—Ç—á
        
        return train_loader, val_loader
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Hugging Face")
        return None, None

def demonstrate_training():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è (–∫—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è)"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    try:
        from trainer import create_trainer
        from config import model_config, training_config
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        model_config_dict = model_config.__dict__.copy()
        training_config_dict = training_config.__dict__.copy()
        
        training_config_dict.update({
            'batch_size': 2,
            'num_epochs': 3,  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            'use_wandb': False,
            'save_every_n_epochs': 1,
            'log_every_n_steps': 1
        })
        
        device = "cuda" if torch.cuda.is_available() else "cpu"
        trainer = create_trainer(model_config_dict, training_config_dict, device)
        
        print(f"‚úÖ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω!")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {training_config_dict['batch_size']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö: {training_config_dict['num_epochs']}")
        
        print("\n–ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ (3 —ç–ø–æ—Ö–∏)...")
        print("‚ö†Ô∏è  –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        start_time = time.time()
        trainer.train(training_config_dict['num_epochs'])
        training_time = time.time() - start_time
        
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {training_time:.1f} —Å–µ–∫—É–Ω–¥!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if trainer.val_losses:
            final_loss = trainer.val_losses[-1]
            print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è: {final_loss:.4f}")
        
        if trainer.val_metrics:
            final_auc = trainer.val_metrics[-1].get('auc_mean', 0)
            print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π AUC: {final_auc:.4f}")
        
        return trainer
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return None

def demonstrate_visualization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüìà –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        from visualization import TrainingVisualizer
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        visualizer = TrainingVisualizer()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        num_epochs = 10
        train_losses = [0.8 - i * 0.05 + np.random.normal(0, 0.02) for i in range(num_epochs)]
        val_losses = [0.85 - i * 0.04 + np.random.normal(0, 0.03) for i in range(num_epochs)]
        
        train_metrics = []
        val_metrics = []
        
        for epoch in range(num_epochs):
            train_metric = {
                'auc_mean': 0.6 + epoch * 0.02 + np.random.normal(0, 0.01),
                'ap_mean': 0.5 + epoch * 0.015 + np.random.normal(0, 0.01)
            }
            val_metric = {
                'auc_mean': 0.58 + epoch * 0.018 + np.random.normal(0, 0.015),
                'ap_mean': 0.48 + epoch * 0.012 + np.random.normal(0, 0.012)
            }
            
            train_metrics.append(train_metric)
            val_metrics.append(val_metric)
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è...")
        curves_path = visualizer.plot_training_curves(
            train_losses, val_losses, train_metrics, val_metrics
        )
        
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {curves_path}")
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º...")
        class_metrics_path = visualizer.plot_class_metrics(val_metrics[-1], "AUC")
        
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º —Å–æ–∑–¥–∞–Ω—ã: {class_metrics_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def demonstrate_model_export():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏"""
    print("\nüì¶ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –≠–ö–°–ü–û–†–¢–ê –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    try:
        from model_exporter import export_model
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
        checkpoint_path = "./checkpoints/best_model.pth"
        if not os.path.exists(checkpoint_path):
            print("‚ùå –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è")
            return False
        
        print("–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã...")
        
        exported_files = export_model(
            checkpoint_path=checkpoint_path,
            export_formats=["pytorch", "onnx"],
            model_name="demo_ct_model",
            output_dir="./exported_models"
        )
        
        print("‚úÖ –ú–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        print("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        
        for format_name, file_path in exported_files.items():
            if os.path.exists(file_path):
                size = os.path.getsize(file_path) / (1024 * 1024)  # MB
                print(f"   {format_name}: {file_path} ({size:.1f} MB)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False

def demonstrate_web_interface():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüåê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê")
    print("=" * 50)
    
    try:
        print("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python web_interface.py")
        print("\n–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É:")
        print("   http://localhost:7860")
        print("\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
        print("   üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print("   üìä –û—Ü–µ–Ω–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        print("   üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ DICOM —Ñ–∞–π–ª–∞—Ö")
        print("   ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∏ –ø–∞—Ç–æ–ª–æ–≥–∏—è—Ö")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False

def demonstrate_pathology_labels():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ç–æ–ª–æ–≥–∏–π"""
    print("\nüè• –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ü–ê–¢–û–õ–û–ì–ò–ò")
    print("=" * 50)
    
    from config import PATHOLOGY_LABELS
    
    print("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ç–æ–ª–æ–≥–∏–π:")
    print()
    
    for i, pathology in enumerate(PATHOLOGY_LABELS, 1):
        print(f"{i:2d}. {pathology}")
    
    print(f"\n–í—Å–µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {len(PATHOLOGY_LABELS)} —Ç–∏–ø–æ–≤ –ø–∞—Ç–æ–ª–æ–≥–∏–π")
    print("–ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç–æ–ª–æ–≥–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_banner()
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_system_requirements():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    model = demonstrate_model_creation()
    if model is None:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    train_loader, val_loader = demonstrate_data_loading()
    if train_loader is None:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞—Ç–∞—Å–µ—Ç—É CT-RATE")
    else:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        trainer = demonstrate_training()
        if trainer is None:
            print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
        else:
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏
            demonstrate_model_export()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    demonstrate_visualization()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    demonstrate_web_interface()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç–æ–ª–æ–≥–∏–π
    demonstrate_pathology_labels()
    
    print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 50)
    
    print("\nüìö –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python web_interface.py")
    print("2. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã: python examples.py --all")
    print("3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: README.md")
    print("4. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python main.py train --epochs 50")
    
    print("\nüí° –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: python quick_start.py --check")
    print("‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: python quick_start.py --status")
    print("‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python web_interface.py")
    print("‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: python main.py train --epochs 100 --visualize")
    print("‚Ä¢ –û—Ü–µ–Ω–∫–∞: python main.py evaluate --checkpoint ./checkpoints/best_model.pth")
    
    print("\nüåü –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã!")

if __name__ == "__main__":
    main()

