#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyTorch —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AMD GPU –Ω–∞ Windows —á–µ—Ä–µ–∑ DirectML
"""
import subprocess
import sys
import platform
import os

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîÑ {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥: {e.stdout}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def check_windows_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Windows"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Windows...")
    
    if platform.system() != "Windows":
        print("‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Windows")
        return False
    
    version = platform.version()
    print(f"‚úÖ Windows –≤–µ—Ä—Å–∏—è: {version}")
    
    # DirectML —Ç—Ä–µ–±—É–µ—Ç Windows 10 –≤–µ—Ä—Å–∏–∏ 1903 –∏–ª–∏ –≤—ã—à–µ
    major, minor, build = version.split('.')
    if int(build) >= 18362:  # Windows 10 1903
        print("‚úÖ –í–µ—Ä—Å–∏—è Windows –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DirectML")
        return True
    else:
        print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Windows 10 –≤–µ—Ä—Å–∏–∏ 1903 –∏–ª–∏ –≤—ã—à–µ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ DirectML")
        return True  # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º

def check_amd_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è AMD GPU"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AMD GPU...")
    
    try:
        import wmi
        c = wmi.WMI()
        
        gpus = []
        for gpu in c.Win32_VideoController():
            if gpu.Name:
                gpus.append(gpu.Name)
                print(f"–ù–∞–π–¥–µ–Ω GPU: {gpu.Name}")
        
        amd_gpus = [gpu for gpu in gpus if 'amd' in gpu.lower() or 'radeon' in gpu.lower()]
        
        if amd_gpus:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã AMD GPU: {amd_gpus}")
            return True
        else:
            print("‚ö†Ô∏è  AMD GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ DirectML –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ GPU")
            return True
            
    except ImportError:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å wmi –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É GPU")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
        return True

def install_pytorch_directml():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DirectML"""
    print("\nüöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AMD DirectML...")
    
    commands = [
        # –û–±–Ω–æ–≤–ª—è–µ–º pip
        "python -m pip install --upgrade pip",
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch (CPU –≤–µ—Ä—Å–∏—è, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å DirectML)
        "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu",
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DirectML
        "pip install torch-directml",
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        "pip install -r requirements.txt"
    ]
    
    success = True
    for command in commands:
        if not run_command(command, f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command.split()[2] if len(command.split()) > 2 else command}"):
            success = False
            break
    
    return success

def test_directml_installation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ DirectML"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É DirectML...")
    
    test_code = """
import torch
import sys

print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º DirectML
try:
    import torch_directml
    print("‚úÖ torch-directml —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DirectML
    device = torch_directml.device()
    print(f"DirectML —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞
    x = torch.randn(2, 3).to(device)
    print(f"DirectML —Ç–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω: {x.shape}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    y = torch.randn(2, 3).to(device)
    z = x + y
    print(f"DirectML –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {z.shape}")
    
    print("‚úÖ DirectML —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
except ImportError as e:
    print(f"‚ùå torch-directml –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    return False
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DirectML: {e}")
    return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å CPU –≤–µ—Ä—Å–∏–µ–π PyTorch)
print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")

return True
"""
    
    try:
        exec(test_code)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("–£–°–¢–ê–ù–û–í–ö–ê PYTORCH –° –ü–û–î–î–ï–†–ñ–ö–û–ô AMD GPU –ù–ê WINDOWS")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Windows
    if not check_windows_version():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AMD GPU
    check_amd_gpu()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch —Å DirectML
    if not install_pytorch_directml():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PyTorch —Å DirectML")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if not test_directml_installation():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return False
    
    print("\n" + "=" * 60)
    print("‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å AMD GPU –Ω–∞ Windows:")
    print("python main.py train --epochs 10")
    print("\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("python -c \"from gpu_utils import detect_gpu_device, print_device_info; device = detect_gpu_device(); print_device_info(device)\"")
    
    print("\nüìã –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:")
    print("‚Ä¢ DirectML —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Windows")
    print("‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç CUDA/ROCm")
    print("‚Ä¢ –î–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Linux —Å ROCm")
    print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä—ã AMD")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
