#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
"""
import subprocess
import sys
import os

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîÑ {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ!")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞!")
        print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–π –ö–¢")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 10):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch Nightly
    pytorch_command = "pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu130"
    if not run_command(pytorch_command, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch Nightly —Å CUDA 13.0"):
        print("‚ö†Ô∏è  –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å CPU –≤–µ—Ä—Å–∏—é PyTorch...")
        pytorch_cpu_command = "pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cpu"
        if not run_command(pytorch_cpu_command, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch Nightly (CPU –≤–µ—Ä—Å–∏—è)"):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyTorch. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏...")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not run_command("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    check_command = '''
python -c "
import sys
print(f'Python: {sys.version}')

try:
    import torch
    print(f'PyTorch: {torch.__version__}')
    print(f'CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.is_available()}')
    if torch.cuda.is_available():
        print(f'CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}')
        print(f'GPU: {torch.cuda.get_device_name()}')
except ImportError:
    print('‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

try:
    import datasets
    print(f'Datasets: {datasets.__version__}')
except ImportError:
    print('‚ùå Datasets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

try:
    import gradio
    print(f'Gradio: {gradio.__version__}')
except ImportError:
    print('‚ùå Gradio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
"
'''
    
    run_command(check_command, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫")
    
    print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python web_interface.py")
    print("2. –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É: python quick_start.py --check")
    print("3. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ: python demo.py")

if __name__ == "__main__":
    main()
